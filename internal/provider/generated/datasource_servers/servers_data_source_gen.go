// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_servers

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ServersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"servers": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"delete_unused_networks": schema.BoolAttribute{
							Computed: true,
						},
						"delete_unused_volumes": schema.BoolAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"high_disk_usage_notification_sent": schema.BoolAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"ip": schema.StringAttribute{
							Computed: true,
						},
						"log_drain_notification_sent": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"port": schema.Int64Attribute{
							Computed: true,
						},
						"proxy": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{},
							CustomType: ProxyType{
								ObjectType: types.ObjectType{
									AttrTypes: ProxyValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"settings": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"concurrent_builds": schema.Int64Attribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"docker_cleanup_frequency": schema.StringAttribute{
									Computed: true,
								},
								"docker_cleanup_threshold": schema.Int64Attribute{
									Computed: true,
								},
								"dynamic_timeout": schema.Int64Attribute{
									Computed: true,
								},
								"force_disabled": schema.BoolAttribute{
									Computed: true,
								},
								"force_server_cleanup": schema.BoolAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"is_build_server": schema.BoolAttribute{
									Computed: true,
								},
								"is_cloudflare_tunnel": schema.BoolAttribute{
									Computed: true,
								},
								"is_jump_server": schema.BoolAttribute{
									Computed: true,
								},
								"is_logdrain_axiom_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_logdrain_custom_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_logdrain_highlight_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_logdrain_newrelic_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_metrics_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_reachable": schema.BoolAttribute{
									Computed: true,
								},
								"is_sentinel_enabled": schema.BoolAttribute{
									Computed: true,
								},
								"is_swarm_manager": schema.BoolAttribute{
									Computed: true,
								},
								"is_swarm_worker": schema.BoolAttribute{
									Computed: true,
								},
								"is_usable": schema.BoolAttribute{
									Computed: true,
								},
								"logdrain_axiom_api_key": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_axiom_dataset_name": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_custom_config": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_custom_config_parser": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_highlight_project_id": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_newrelic_base_uri": schema.StringAttribute{
									Computed: true,
								},
								"logdrain_newrelic_license_key": schema.StringAttribute{
									Computed: true,
								},
								"sentinel_metrics_history_days": schema.Int64Attribute{
									Computed: true,
								},
								"sentinel_metrics_refresh_rate_seconds": schema.Int64Attribute{
									Computed: true,
								},
								"sentinel_token": schema.StringAttribute{
									Computed: true,
								},
								"server_id": schema.Int64Attribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"wildcard_domain": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: SettingsType{
								ObjectType: types.ObjectType{
									AttrTypes: SettingsValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Server Settings model",
							MarkdownDescription: "Server Settings model",
						},
						"swarm_cluster": schema.StringAttribute{
							Computed: true,
						},
						"unreachable_count": schema.Int64Attribute{
							Computed: true,
						},
						"unreachable_notification_sent": schema.BoolAttribute{
							Computed: true,
						},
						"user": schema.StringAttribute{
							Computed: true,
						},
						"uuid": schema.StringAttribute{
							Computed: true,
						},
						"validation_logs": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: ServersType{
						ObjectType: types.ObjectType{
							AttrTypes: ServersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ServersModel struct {
	Servers types.Set `tfsdk:"servers"`
}

var _ basetypes.ObjectTypable = ServersType{}

type ServersType struct {
	basetypes.ObjectType
}

func (t ServersType) Equal(o attr.Type) bool {
	other, ok := o.(ServersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ServersType) String() string {
	return "ServersType"
}

func (t ServersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deleteUnusedNetworksAttribute, ok := attributes["delete_unused_networks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_unused_networks is missing from object`)

		return nil, diags
	}

	deleteUnusedNetworksVal, ok := deleteUnusedNetworksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_unused_networks expected to be basetypes.BoolValue, was: %T`, deleteUnusedNetworksAttribute))
	}

	deleteUnusedVolumesAttribute, ok := attributes["delete_unused_volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_unused_volumes is missing from object`)

		return nil, diags
	}

	deleteUnusedVolumesVal, ok := deleteUnusedVolumesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_unused_volumes expected to be basetypes.BoolValue, was: %T`, deleteUnusedVolumesAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	highDiskUsageNotificationSentAttribute, ok := attributes["high_disk_usage_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`high_disk_usage_notification_sent is missing from object`)

		return nil, diags
	}

	highDiskUsageNotificationSentVal, ok := highDiskUsageNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`high_disk_usage_notification_sent expected to be basetypes.BoolValue, was: %T`, highDiskUsageNotificationSentAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	logDrainNotificationSentAttribute, ok := attributes["log_drain_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_drain_notification_sent is missing from object`)

		return nil, diags
	}

	logDrainNotificationSentVal, ok := logDrainNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_drain_notification_sent expected to be basetypes.BoolValue, was: %T`, logDrainNotificationSentAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return nil, diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	proxyAttribute, ok := attributes["proxy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`proxy is missing from object`)

		return nil, diags
	}

	proxyVal, ok := proxyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`proxy expected to be basetypes.ObjectValue, was: %T`, proxyAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	swarmClusterAttribute, ok := attributes["swarm_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`swarm_cluster is missing from object`)

		return nil, diags
	}

	swarmClusterVal, ok := swarmClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`swarm_cluster expected to be basetypes.StringValue, was: %T`, swarmClusterAttribute))
	}

	unreachableCountAttribute, ok := attributes["unreachable_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unreachable_count is missing from object`)

		return nil, diags
	}

	unreachableCountVal, ok := unreachableCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unreachable_count expected to be basetypes.Int64Value, was: %T`, unreachableCountAttribute))
	}

	unreachableNotificationSentAttribute, ok := attributes["unreachable_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unreachable_notification_sent is missing from object`)

		return nil, diags
	}

	unreachableNotificationSentVal, ok := unreachableNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unreachable_notification_sent expected to be basetypes.BoolValue, was: %T`, unreachableNotificationSentAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return nil, diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	validationLogsAttribute, ok := attributes["validation_logs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`validation_logs is missing from object`)

		return nil, diags
	}

	validationLogsVal, ok := validationLogsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`validation_logs expected to be basetypes.StringValue, was: %T`, validationLogsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ServersValue{
		DeleteUnusedNetworks:          deleteUnusedNetworksVal,
		DeleteUnusedVolumes:           deleteUnusedVolumesVal,
		Description:                   descriptionVal,
		HighDiskUsageNotificationSent: highDiskUsageNotificationSentVal,
		Id:                            idVal,
		Ip:                            ipVal,
		LogDrainNotificationSent:      logDrainNotificationSentVal,
		Name:                          nameVal,
		Port:                          portVal,
		Proxy:                         proxyVal,
		Settings:                      settingsVal,
		SwarmCluster:                  swarmClusterVal,
		UnreachableCount:              unreachableCountVal,
		UnreachableNotificationSent:   unreachableNotificationSentVal,
		User:                          userVal,
		Uuid:                          uuidVal,
		ValidationLogs:                validationLogsVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewServersValueNull() ServersValue {
	return ServersValue{
		state: attr.ValueStateNull,
	}
}

func NewServersValueUnknown() ServersValue {
	return ServersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewServersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ServersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ServersValue Attribute Value",
				"While creating a ServersValue value, a missing attribute value was detected. "+
					"A ServersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ServersValue Attribute Type",
				"While creating a ServersValue value, an invalid attribute value was detected. "+
					"A ServersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ServersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ServersValue Attribute Value",
				"While creating a ServersValue value, an extra attribute value was detected. "+
					"A ServersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ServersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewServersValueUnknown(), diags
	}

	deleteUnusedNetworksAttribute, ok := attributes["delete_unused_networks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_unused_networks is missing from object`)

		return NewServersValueUnknown(), diags
	}

	deleteUnusedNetworksVal, ok := deleteUnusedNetworksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_unused_networks expected to be basetypes.BoolValue, was: %T`, deleteUnusedNetworksAttribute))
	}

	deleteUnusedVolumesAttribute, ok := attributes["delete_unused_volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_unused_volumes is missing from object`)

		return NewServersValueUnknown(), diags
	}

	deleteUnusedVolumesVal, ok := deleteUnusedVolumesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_unused_volumes expected to be basetypes.BoolValue, was: %T`, deleteUnusedVolumesAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewServersValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	highDiskUsageNotificationSentAttribute, ok := attributes["high_disk_usage_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`high_disk_usage_notification_sent is missing from object`)

		return NewServersValueUnknown(), diags
	}

	highDiskUsageNotificationSentVal, ok := highDiskUsageNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`high_disk_usage_notification_sent expected to be basetypes.BoolValue, was: %T`, highDiskUsageNotificationSentAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewServersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewServersValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	logDrainNotificationSentAttribute, ok := attributes["log_drain_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_drain_notification_sent is missing from object`)

		return NewServersValueUnknown(), diags
	}

	logDrainNotificationSentVal, ok := logDrainNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_drain_notification_sent expected to be basetypes.BoolValue, was: %T`, logDrainNotificationSentAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewServersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return NewServersValueUnknown(), diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	proxyAttribute, ok := attributes["proxy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`proxy is missing from object`)

		return NewServersValueUnknown(), diags
	}

	proxyVal, ok := proxyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`proxy expected to be basetypes.ObjectValue, was: %T`, proxyAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewServersValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	swarmClusterAttribute, ok := attributes["swarm_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`swarm_cluster is missing from object`)

		return NewServersValueUnknown(), diags
	}

	swarmClusterVal, ok := swarmClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`swarm_cluster expected to be basetypes.StringValue, was: %T`, swarmClusterAttribute))
	}

	unreachableCountAttribute, ok := attributes["unreachable_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unreachable_count is missing from object`)

		return NewServersValueUnknown(), diags
	}

	unreachableCountVal, ok := unreachableCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unreachable_count expected to be basetypes.Int64Value, was: %T`, unreachableCountAttribute))
	}

	unreachableNotificationSentAttribute, ok := attributes["unreachable_notification_sent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unreachable_notification_sent is missing from object`)

		return NewServersValueUnknown(), diags
	}

	unreachableNotificationSentVal, ok := unreachableNotificationSentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unreachable_notification_sent expected to be basetypes.BoolValue, was: %T`, unreachableNotificationSentAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return NewServersValueUnknown(), diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewServersValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	validationLogsAttribute, ok := attributes["validation_logs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`validation_logs is missing from object`)

		return NewServersValueUnknown(), diags
	}

	validationLogsVal, ok := validationLogsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`validation_logs expected to be basetypes.StringValue, was: %T`, validationLogsAttribute))
	}

	if diags.HasError() {
		return NewServersValueUnknown(), diags
	}

	return ServersValue{
		DeleteUnusedNetworks:          deleteUnusedNetworksVal,
		DeleteUnusedVolumes:           deleteUnusedVolumesVal,
		Description:                   descriptionVal,
		HighDiskUsageNotificationSent: highDiskUsageNotificationSentVal,
		Id:                            idVal,
		Ip:                            ipVal,
		LogDrainNotificationSent:      logDrainNotificationSentVal,
		Name:                          nameVal,
		Port:                          portVal,
		Proxy:                         proxyVal,
		Settings:                      settingsVal,
		SwarmCluster:                  swarmClusterVal,
		UnreachableCount:              unreachableCountVal,
		UnreachableNotificationSent:   unreachableNotificationSentVal,
		User:                          userVal,
		Uuid:                          uuidVal,
		ValidationLogs:                validationLogsVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewServersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ServersValue {
	object, diags := NewServersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewServersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ServersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewServersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewServersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewServersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewServersValueMust(ServersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ServersType) ValueType(ctx context.Context) attr.Value {
	return ServersValue{}
}

var _ basetypes.ObjectValuable = ServersValue{}

type ServersValue struct {
	DeleteUnusedNetworks          basetypes.BoolValue   `tfsdk:"delete_unused_networks"`
	DeleteUnusedVolumes           basetypes.BoolValue   `tfsdk:"delete_unused_volumes"`
	Description                   basetypes.StringValue `tfsdk:"description"`
	HighDiskUsageNotificationSent basetypes.BoolValue   `tfsdk:"high_disk_usage_notification_sent"`
	Id                            basetypes.Int64Value  `tfsdk:"id"`
	Ip                            basetypes.StringValue `tfsdk:"ip"`
	LogDrainNotificationSent      basetypes.BoolValue   `tfsdk:"log_drain_notification_sent"`
	Name                          basetypes.StringValue `tfsdk:"name"`
	Port                          basetypes.Int64Value  `tfsdk:"port"`
	Proxy                         basetypes.ObjectValue `tfsdk:"proxy"`
	Settings                      basetypes.ObjectValue `tfsdk:"settings"`
	SwarmCluster                  basetypes.StringValue `tfsdk:"swarm_cluster"`
	UnreachableCount              basetypes.Int64Value  `tfsdk:"unreachable_count"`
	UnreachableNotificationSent   basetypes.BoolValue   `tfsdk:"unreachable_notification_sent"`
	User                          basetypes.StringValue `tfsdk:"user"`
	Uuid                          basetypes.StringValue `tfsdk:"uuid"`
	ValidationLogs                basetypes.StringValue `tfsdk:"validation_logs"`
	state                         attr.ValueState
}

func (v ServersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 17)

	var val tftypes.Value
	var err error

	attrTypes["delete_unused_networks"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["delete_unused_volumes"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["high_disk_usage_notification_sent"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["log_drain_notification_sent"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["proxy"] = basetypes.ObjectType{
		AttrTypes: ProxyValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.ObjectType{
		AttrTypes: SettingsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["swarm_cluster"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["unreachable_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["unreachable_notification_sent"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["user"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["validation_logs"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 17)

		val, err = v.DeleteUnusedNetworks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_unused_networks"] = val

		val, err = v.DeleteUnusedVolumes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_unused_volumes"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.HighDiskUsageNotificationSent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["high_disk_usage_notification_sent"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.LogDrainNotificationSent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["log_drain_notification_sent"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Port.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port"] = val

		val, err = v.Proxy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["proxy"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.SwarmCluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["swarm_cluster"] = val

		val, err = v.UnreachableCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["unreachable_count"] = val

		val, err = v.UnreachableNotificationSent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["unreachable_notification_sent"] = val

		val, err = v.User.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		val, err = v.ValidationLogs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["validation_logs"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ServersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ServersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ServersValue) String() string {
	return "ServersValue"
}

func (v ServersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var proxy basetypes.ObjectValue

	if v.Proxy.IsNull() {
		proxy = types.ObjectNull(
			ProxyValue{}.AttributeTypes(ctx),
		)
	}

	if v.Proxy.IsUnknown() {
		proxy = types.ObjectUnknown(
			ProxyValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Proxy.IsNull() && !v.Proxy.IsUnknown() {
		proxy = types.ObjectValueMust(
			ProxyValue{}.AttributeTypes(ctx),
			v.Proxy.Attributes(),
		)
	}

	var settings basetypes.ObjectValue

	if v.Settings.IsNull() {
		settings = types.ObjectNull(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ObjectUnknown(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Settings.IsNull() && !v.Settings.IsUnknown() {
		settings = types.ObjectValueMust(
			SettingsValue{}.AttributeTypes(ctx),
			v.Settings.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"delete_unused_networks":            basetypes.BoolType{},
		"delete_unused_volumes":             basetypes.BoolType{},
		"description":                       basetypes.StringType{},
		"high_disk_usage_notification_sent": basetypes.BoolType{},
		"id":                                basetypes.Int64Type{},
		"ip":                                basetypes.StringType{},
		"log_drain_notification_sent":       basetypes.BoolType{},
		"name":                              basetypes.StringType{},
		"port":                              basetypes.Int64Type{},
		"proxy": basetypes.ObjectType{
			AttrTypes: ProxyValue{}.AttributeTypes(ctx),
		},
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"swarm_cluster":                 basetypes.StringType{},
		"unreachable_count":             basetypes.Int64Type{},
		"unreachable_notification_sent": basetypes.BoolType{},
		"user":                          basetypes.StringType{},
		"uuid":                          basetypes.StringType{},
		"validation_logs":               basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delete_unused_networks":            v.DeleteUnusedNetworks,
			"delete_unused_volumes":             v.DeleteUnusedVolumes,
			"description":                       v.Description,
			"high_disk_usage_notification_sent": v.HighDiskUsageNotificationSent,
			"id":                                v.Id,
			"ip":                                v.Ip,
			"log_drain_notification_sent":       v.LogDrainNotificationSent,
			"name":                              v.Name,
			"port":                              v.Port,
			"proxy":                             proxy,
			"settings":                          settings,
			"swarm_cluster":                     v.SwarmCluster,
			"unreachable_count":                 v.UnreachableCount,
			"unreachable_notification_sent":     v.UnreachableNotificationSent,
			"user":                              v.User,
			"uuid":                              v.Uuid,
			"validation_logs":                   v.ValidationLogs,
		})

	return objVal, diags
}

func (v ServersValue) Equal(o attr.Value) bool {
	other, ok := o.(ServersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DeleteUnusedNetworks.Equal(other.DeleteUnusedNetworks) {
		return false
	}

	if !v.DeleteUnusedVolumes.Equal(other.DeleteUnusedVolumes) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.HighDiskUsageNotificationSent.Equal(other.HighDiskUsageNotificationSent) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.LogDrainNotificationSent.Equal(other.LogDrainNotificationSent) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Port.Equal(other.Port) {
		return false
	}

	if !v.Proxy.Equal(other.Proxy) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.SwarmCluster.Equal(other.SwarmCluster) {
		return false
	}

	if !v.UnreachableCount.Equal(other.UnreachableCount) {
		return false
	}

	if !v.UnreachableNotificationSent.Equal(other.UnreachableNotificationSent) {
		return false
	}

	if !v.User.Equal(other.User) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	if !v.ValidationLogs.Equal(other.ValidationLogs) {
		return false
	}

	return true
}

func (v ServersValue) Type(ctx context.Context) attr.Type {
	return ServersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ServersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delete_unused_networks":            basetypes.BoolType{},
		"delete_unused_volumes":             basetypes.BoolType{},
		"description":                       basetypes.StringType{},
		"high_disk_usage_notification_sent": basetypes.BoolType{},
		"id":                                basetypes.Int64Type{},
		"ip":                                basetypes.StringType{},
		"log_drain_notification_sent":       basetypes.BoolType{},
		"name":                              basetypes.StringType{},
		"port":                              basetypes.Int64Type{},
		"proxy": basetypes.ObjectType{
			AttrTypes: ProxyValue{}.AttributeTypes(ctx),
		},
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"swarm_cluster":                 basetypes.StringType{},
		"unreachable_count":             basetypes.Int64Type{},
		"unreachable_notification_sent": basetypes.BoolType{},
		"user":                          basetypes.StringType{},
		"uuid":                          basetypes.StringType{},
		"validation_logs":               basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ProxyType{}

type ProxyType struct {
	basetypes.ObjectType
}

func (t ProxyType) Equal(o attr.Type) bool {
	other, ok := o.(ProxyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ProxyType) String() string {
	return "ProxyType"
}

func (t ProxyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return ProxyValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewProxyValueNull() ProxyValue {
	return ProxyValue{
		state: attr.ValueStateNull,
	}
}

func NewProxyValueUnknown() ProxyValue {
	return ProxyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewProxyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ProxyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ProxyValue Attribute Value",
				"While creating a ProxyValue value, a missing attribute value was detected. "+
					"A ProxyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProxyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ProxyValue Attribute Type",
				"While creating a ProxyValue value, an invalid attribute value was detected. "+
					"A ProxyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProxyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ProxyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ProxyValue Attribute Value",
				"While creating a ProxyValue value, an extra attribute value was detected. "+
					"A ProxyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ProxyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewProxyValueUnknown(), diags
	}

	if diags.HasError() {
		return NewProxyValueUnknown(), diags
	}

	return ProxyValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewProxyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ProxyValue {
	object, diags := NewProxyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewProxyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ProxyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewProxyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewProxyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewProxyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewProxyValueMust(ProxyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ProxyType) ValueType(ctx context.Context) attr.Value {
	return ProxyValue{}
}

var _ basetypes.ObjectValuable = ProxyValue{}

type ProxyValue struct {
	state attr.ValueState
}

func (v ProxyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ProxyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ProxyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ProxyValue) String() string {
	return "ProxyValue"
}

func (v ProxyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v ProxyValue) Equal(o attr.Value) bool {
	other, ok := o.(ProxyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v ProxyValue) Type(ctx context.Context) attr.Type {
	return ProxyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ProxyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = SettingsType{}

type SettingsType struct {
	basetypes.ObjectType
}

func (t SettingsType) Equal(o attr.Type) bool {
	other, ok := o.(SettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SettingsType) String() string {
	return "SettingsType"
}

func (t SettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	concurrentBuildsAttribute, ok := attributes["concurrent_builds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`concurrent_builds is missing from object`)

		return nil, diags
	}

	concurrentBuildsVal, ok := concurrentBuildsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`concurrent_builds expected to be basetypes.Int64Value, was: %T`, concurrentBuildsAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	dockerCleanupFrequencyAttribute, ok := attributes["docker_cleanup_frequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`docker_cleanup_frequency is missing from object`)

		return nil, diags
	}

	dockerCleanupFrequencyVal, ok := dockerCleanupFrequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`docker_cleanup_frequency expected to be basetypes.StringValue, was: %T`, dockerCleanupFrequencyAttribute))
	}

	dockerCleanupThresholdAttribute, ok := attributes["docker_cleanup_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`docker_cleanup_threshold is missing from object`)

		return nil, diags
	}

	dockerCleanupThresholdVal, ok := dockerCleanupThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`docker_cleanup_threshold expected to be basetypes.Int64Value, was: %T`, dockerCleanupThresholdAttribute))
	}

	dynamicTimeoutAttribute, ok := attributes["dynamic_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dynamic_timeout is missing from object`)

		return nil, diags
	}

	dynamicTimeoutVal, ok := dynamicTimeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dynamic_timeout expected to be basetypes.Int64Value, was: %T`, dynamicTimeoutAttribute))
	}

	forceDisabledAttribute, ok := attributes["force_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_disabled is missing from object`)

		return nil, diags
	}

	forceDisabledVal, ok := forceDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_disabled expected to be basetypes.BoolValue, was: %T`, forceDisabledAttribute))
	}

	forceServerCleanupAttribute, ok := attributes["force_server_cleanup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_server_cleanup is missing from object`)

		return nil, diags
	}

	forceServerCleanupVal, ok := forceServerCleanupAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_server_cleanup expected to be basetypes.BoolValue, was: %T`, forceServerCleanupAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	isBuildServerAttribute, ok := attributes["is_build_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_build_server is missing from object`)

		return nil, diags
	}

	isBuildServerVal, ok := isBuildServerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_build_server expected to be basetypes.BoolValue, was: %T`, isBuildServerAttribute))
	}

	isCloudflareTunnelAttribute, ok := attributes["is_cloudflare_tunnel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_cloudflare_tunnel is missing from object`)

		return nil, diags
	}

	isCloudflareTunnelVal, ok := isCloudflareTunnelAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_cloudflare_tunnel expected to be basetypes.BoolValue, was: %T`, isCloudflareTunnelAttribute))
	}

	isJumpServerAttribute, ok := attributes["is_jump_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_jump_server is missing from object`)

		return nil, diags
	}

	isJumpServerVal, ok := isJumpServerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_jump_server expected to be basetypes.BoolValue, was: %T`, isJumpServerAttribute))
	}

	isLogdrainAxiomEnabledAttribute, ok := attributes["is_logdrain_axiom_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_axiom_enabled is missing from object`)

		return nil, diags
	}

	isLogdrainAxiomEnabledVal, ok := isLogdrainAxiomEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_axiom_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainAxiomEnabledAttribute))
	}

	isLogdrainCustomEnabledAttribute, ok := attributes["is_logdrain_custom_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_custom_enabled is missing from object`)

		return nil, diags
	}

	isLogdrainCustomEnabledVal, ok := isLogdrainCustomEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_custom_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainCustomEnabledAttribute))
	}

	isLogdrainHighlightEnabledAttribute, ok := attributes["is_logdrain_highlight_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_highlight_enabled is missing from object`)

		return nil, diags
	}

	isLogdrainHighlightEnabledVal, ok := isLogdrainHighlightEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_highlight_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainHighlightEnabledAttribute))
	}

	isLogdrainNewrelicEnabledAttribute, ok := attributes["is_logdrain_newrelic_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_newrelic_enabled is missing from object`)

		return nil, diags
	}

	isLogdrainNewrelicEnabledVal, ok := isLogdrainNewrelicEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_newrelic_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainNewrelicEnabledAttribute))
	}

	isMetricsEnabledAttribute, ok := attributes["is_metrics_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_metrics_enabled is missing from object`)

		return nil, diags
	}

	isMetricsEnabledVal, ok := isMetricsEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_metrics_enabled expected to be basetypes.BoolValue, was: %T`, isMetricsEnabledAttribute))
	}

	isReachableAttribute, ok := attributes["is_reachable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_reachable is missing from object`)

		return nil, diags
	}

	isReachableVal, ok := isReachableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_reachable expected to be basetypes.BoolValue, was: %T`, isReachableAttribute))
	}

	isSentinelEnabledAttribute, ok := attributes["is_sentinel_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sentinel_enabled is missing from object`)

		return nil, diags
	}

	isSentinelEnabledVal, ok := isSentinelEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sentinel_enabled expected to be basetypes.BoolValue, was: %T`, isSentinelEnabledAttribute))
	}

	isSwarmManagerAttribute, ok := attributes["is_swarm_manager"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_swarm_manager is missing from object`)

		return nil, diags
	}

	isSwarmManagerVal, ok := isSwarmManagerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_swarm_manager expected to be basetypes.BoolValue, was: %T`, isSwarmManagerAttribute))
	}

	isSwarmWorkerAttribute, ok := attributes["is_swarm_worker"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_swarm_worker is missing from object`)

		return nil, diags
	}

	isSwarmWorkerVal, ok := isSwarmWorkerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_swarm_worker expected to be basetypes.BoolValue, was: %T`, isSwarmWorkerAttribute))
	}

	isUsableAttribute, ok := attributes["is_usable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_usable is missing from object`)

		return nil, diags
	}

	isUsableVal, ok := isUsableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_usable expected to be basetypes.BoolValue, was: %T`, isUsableAttribute))
	}

	logdrainAxiomApiKeyAttribute, ok := attributes["logdrain_axiom_api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_axiom_api_key is missing from object`)

		return nil, diags
	}

	logdrainAxiomApiKeyVal, ok := logdrainAxiomApiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_axiom_api_key expected to be basetypes.StringValue, was: %T`, logdrainAxiomApiKeyAttribute))
	}

	logdrainAxiomDatasetNameAttribute, ok := attributes["logdrain_axiom_dataset_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_axiom_dataset_name is missing from object`)

		return nil, diags
	}

	logdrainAxiomDatasetNameVal, ok := logdrainAxiomDatasetNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_axiom_dataset_name expected to be basetypes.StringValue, was: %T`, logdrainAxiomDatasetNameAttribute))
	}

	logdrainCustomConfigAttribute, ok := attributes["logdrain_custom_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_custom_config is missing from object`)

		return nil, diags
	}

	logdrainCustomConfigVal, ok := logdrainCustomConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_custom_config expected to be basetypes.StringValue, was: %T`, logdrainCustomConfigAttribute))
	}

	logdrainCustomConfigParserAttribute, ok := attributes["logdrain_custom_config_parser"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_custom_config_parser is missing from object`)

		return nil, diags
	}

	logdrainCustomConfigParserVal, ok := logdrainCustomConfigParserAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_custom_config_parser expected to be basetypes.StringValue, was: %T`, logdrainCustomConfigParserAttribute))
	}

	logdrainHighlightProjectIdAttribute, ok := attributes["logdrain_highlight_project_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_highlight_project_id is missing from object`)

		return nil, diags
	}

	logdrainHighlightProjectIdVal, ok := logdrainHighlightProjectIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_highlight_project_id expected to be basetypes.StringValue, was: %T`, logdrainHighlightProjectIdAttribute))
	}

	logdrainNewrelicBaseUriAttribute, ok := attributes["logdrain_newrelic_base_uri"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_newrelic_base_uri is missing from object`)

		return nil, diags
	}

	logdrainNewrelicBaseUriVal, ok := logdrainNewrelicBaseUriAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_newrelic_base_uri expected to be basetypes.StringValue, was: %T`, logdrainNewrelicBaseUriAttribute))
	}

	logdrainNewrelicLicenseKeyAttribute, ok := attributes["logdrain_newrelic_license_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_newrelic_license_key is missing from object`)

		return nil, diags
	}

	logdrainNewrelicLicenseKeyVal, ok := logdrainNewrelicLicenseKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_newrelic_license_key expected to be basetypes.StringValue, was: %T`, logdrainNewrelicLicenseKeyAttribute))
	}

	sentinelMetricsHistoryDaysAttribute, ok := attributes["sentinel_metrics_history_days"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_metrics_history_days is missing from object`)

		return nil, diags
	}

	sentinelMetricsHistoryDaysVal, ok := sentinelMetricsHistoryDaysAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_metrics_history_days expected to be basetypes.Int64Value, was: %T`, sentinelMetricsHistoryDaysAttribute))
	}

	sentinelMetricsRefreshRateSecondsAttribute, ok := attributes["sentinel_metrics_refresh_rate_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_metrics_refresh_rate_seconds is missing from object`)

		return nil, diags
	}

	sentinelMetricsRefreshRateSecondsVal, ok := sentinelMetricsRefreshRateSecondsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_metrics_refresh_rate_seconds expected to be basetypes.Int64Value, was: %T`, sentinelMetricsRefreshRateSecondsAttribute))
	}

	sentinelTokenAttribute, ok := attributes["sentinel_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_token is missing from object`)

		return nil, diags
	}

	sentinelTokenVal, ok := sentinelTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_token expected to be basetypes.StringValue, was: %T`, sentinelTokenAttribute))
	}

	serverIdAttribute, ok := attributes["server_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`server_id is missing from object`)

		return nil, diags
	}

	serverIdVal, ok := serverIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`server_id expected to be basetypes.Int64Value, was: %T`, serverIdAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	wildcardDomainAttribute, ok := attributes["wildcard_domain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wildcard_domain is missing from object`)

		return nil, diags
	}

	wildcardDomainVal, ok := wildcardDomainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wildcard_domain expected to be basetypes.StringValue, was: %T`, wildcardDomainAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SettingsValue{
		ConcurrentBuilds:                  concurrentBuildsVal,
		CreatedAt:                         createdAtVal,
		DockerCleanupFrequency:            dockerCleanupFrequencyVal,
		DockerCleanupThreshold:            dockerCleanupThresholdVal,
		DynamicTimeout:                    dynamicTimeoutVal,
		ForceDisabled:                     forceDisabledVal,
		ForceServerCleanup:                forceServerCleanupVal,
		Id:                                idVal,
		IsBuildServer:                     isBuildServerVal,
		IsCloudflareTunnel:                isCloudflareTunnelVal,
		IsJumpServer:                      isJumpServerVal,
		IsLogdrainAxiomEnabled:            isLogdrainAxiomEnabledVal,
		IsLogdrainCustomEnabled:           isLogdrainCustomEnabledVal,
		IsLogdrainHighlightEnabled:        isLogdrainHighlightEnabledVal,
		IsLogdrainNewrelicEnabled:         isLogdrainNewrelicEnabledVal,
		IsMetricsEnabled:                  isMetricsEnabledVal,
		IsReachable:                       isReachableVal,
		IsSentinelEnabled:                 isSentinelEnabledVal,
		IsSwarmManager:                    isSwarmManagerVal,
		IsSwarmWorker:                     isSwarmWorkerVal,
		IsUsable:                          isUsableVal,
		LogdrainAxiomApiKey:               logdrainAxiomApiKeyVal,
		LogdrainAxiomDatasetName:          logdrainAxiomDatasetNameVal,
		LogdrainCustomConfig:              logdrainCustomConfigVal,
		LogdrainCustomConfigParser:        logdrainCustomConfigParserVal,
		LogdrainHighlightProjectId:        logdrainHighlightProjectIdVal,
		LogdrainNewrelicBaseUri:           logdrainNewrelicBaseUriVal,
		LogdrainNewrelicLicenseKey:        logdrainNewrelicLicenseKeyVal,
		SentinelMetricsHistoryDays:        sentinelMetricsHistoryDaysVal,
		SentinelMetricsRefreshRateSeconds: sentinelMetricsRefreshRateSecondsVal,
		SentinelToken:                     sentinelTokenVal,
		ServerId:                          serverIdVal,
		UpdatedAt:                         updatedAtVal,
		WildcardDomain:                    wildcardDomainVal,
		state:                             attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueNull() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewSettingsValueUnknown() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SettingsValue Attribute Value",
				"While creating a SettingsValue value, a missing attribute value was detected. "+
					"A SettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SettingsValue Attribute Type",
				"While creating a SettingsValue value, an invalid attribute value was detected. "+
					"A SettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SettingsValue Attribute Value",
				"While creating a SettingsValue value, an extra attribute value was detected. "+
					"A SettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	concurrentBuildsAttribute, ok := attributes["concurrent_builds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`concurrent_builds is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	concurrentBuildsVal, ok := concurrentBuildsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`concurrent_builds expected to be basetypes.Int64Value, was: %T`, concurrentBuildsAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	dockerCleanupFrequencyAttribute, ok := attributes["docker_cleanup_frequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`docker_cleanup_frequency is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	dockerCleanupFrequencyVal, ok := dockerCleanupFrequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`docker_cleanup_frequency expected to be basetypes.StringValue, was: %T`, dockerCleanupFrequencyAttribute))
	}

	dockerCleanupThresholdAttribute, ok := attributes["docker_cleanup_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`docker_cleanup_threshold is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	dockerCleanupThresholdVal, ok := dockerCleanupThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`docker_cleanup_threshold expected to be basetypes.Int64Value, was: %T`, dockerCleanupThresholdAttribute))
	}

	dynamicTimeoutAttribute, ok := attributes["dynamic_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dynamic_timeout is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	dynamicTimeoutVal, ok := dynamicTimeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dynamic_timeout expected to be basetypes.Int64Value, was: %T`, dynamicTimeoutAttribute))
	}

	forceDisabledAttribute, ok := attributes["force_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_disabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	forceDisabledVal, ok := forceDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_disabled expected to be basetypes.BoolValue, was: %T`, forceDisabledAttribute))
	}

	forceServerCleanupAttribute, ok := attributes["force_server_cleanup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_server_cleanup is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	forceServerCleanupVal, ok := forceServerCleanupAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_server_cleanup expected to be basetypes.BoolValue, was: %T`, forceServerCleanupAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	isBuildServerAttribute, ok := attributes["is_build_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_build_server is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isBuildServerVal, ok := isBuildServerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_build_server expected to be basetypes.BoolValue, was: %T`, isBuildServerAttribute))
	}

	isCloudflareTunnelAttribute, ok := attributes["is_cloudflare_tunnel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_cloudflare_tunnel is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isCloudflareTunnelVal, ok := isCloudflareTunnelAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_cloudflare_tunnel expected to be basetypes.BoolValue, was: %T`, isCloudflareTunnelAttribute))
	}

	isJumpServerAttribute, ok := attributes["is_jump_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_jump_server is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isJumpServerVal, ok := isJumpServerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_jump_server expected to be basetypes.BoolValue, was: %T`, isJumpServerAttribute))
	}

	isLogdrainAxiomEnabledAttribute, ok := attributes["is_logdrain_axiom_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_axiom_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isLogdrainAxiomEnabledVal, ok := isLogdrainAxiomEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_axiom_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainAxiomEnabledAttribute))
	}

	isLogdrainCustomEnabledAttribute, ok := attributes["is_logdrain_custom_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_custom_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isLogdrainCustomEnabledVal, ok := isLogdrainCustomEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_custom_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainCustomEnabledAttribute))
	}

	isLogdrainHighlightEnabledAttribute, ok := attributes["is_logdrain_highlight_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_highlight_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isLogdrainHighlightEnabledVal, ok := isLogdrainHighlightEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_highlight_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainHighlightEnabledAttribute))
	}

	isLogdrainNewrelicEnabledAttribute, ok := attributes["is_logdrain_newrelic_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_logdrain_newrelic_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isLogdrainNewrelicEnabledVal, ok := isLogdrainNewrelicEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_logdrain_newrelic_enabled expected to be basetypes.BoolValue, was: %T`, isLogdrainNewrelicEnabledAttribute))
	}

	isMetricsEnabledAttribute, ok := attributes["is_metrics_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_metrics_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isMetricsEnabledVal, ok := isMetricsEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_metrics_enabled expected to be basetypes.BoolValue, was: %T`, isMetricsEnabledAttribute))
	}

	isReachableAttribute, ok := attributes["is_reachable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_reachable is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isReachableVal, ok := isReachableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_reachable expected to be basetypes.BoolValue, was: %T`, isReachableAttribute))
	}

	isSentinelEnabledAttribute, ok := attributes["is_sentinel_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sentinel_enabled is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isSentinelEnabledVal, ok := isSentinelEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sentinel_enabled expected to be basetypes.BoolValue, was: %T`, isSentinelEnabledAttribute))
	}

	isSwarmManagerAttribute, ok := attributes["is_swarm_manager"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_swarm_manager is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isSwarmManagerVal, ok := isSwarmManagerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_swarm_manager expected to be basetypes.BoolValue, was: %T`, isSwarmManagerAttribute))
	}

	isSwarmWorkerAttribute, ok := attributes["is_swarm_worker"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_swarm_worker is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isSwarmWorkerVal, ok := isSwarmWorkerAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_swarm_worker expected to be basetypes.BoolValue, was: %T`, isSwarmWorkerAttribute))
	}

	isUsableAttribute, ok := attributes["is_usable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_usable is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	isUsableVal, ok := isUsableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_usable expected to be basetypes.BoolValue, was: %T`, isUsableAttribute))
	}

	logdrainAxiomApiKeyAttribute, ok := attributes["logdrain_axiom_api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_axiom_api_key is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainAxiomApiKeyVal, ok := logdrainAxiomApiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_axiom_api_key expected to be basetypes.StringValue, was: %T`, logdrainAxiomApiKeyAttribute))
	}

	logdrainAxiomDatasetNameAttribute, ok := attributes["logdrain_axiom_dataset_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_axiom_dataset_name is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainAxiomDatasetNameVal, ok := logdrainAxiomDatasetNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_axiom_dataset_name expected to be basetypes.StringValue, was: %T`, logdrainAxiomDatasetNameAttribute))
	}

	logdrainCustomConfigAttribute, ok := attributes["logdrain_custom_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_custom_config is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainCustomConfigVal, ok := logdrainCustomConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_custom_config expected to be basetypes.StringValue, was: %T`, logdrainCustomConfigAttribute))
	}

	logdrainCustomConfigParserAttribute, ok := attributes["logdrain_custom_config_parser"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_custom_config_parser is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainCustomConfigParserVal, ok := logdrainCustomConfigParserAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_custom_config_parser expected to be basetypes.StringValue, was: %T`, logdrainCustomConfigParserAttribute))
	}

	logdrainHighlightProjectIdAttribute, ok := attributes["logdrain_highlight_project_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_highlight_project_id is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainHighlightProjectIdVal, ok := logdrainHighlightProjectIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_highlight_project_id expected to be basetypes.StringValue, was: %T`, logdrainHighlightProjectIdAttribute))
	}

	logdrainNewrelicBaseUriAttribute, ok := attributes["logdrain_newrelic_base_uri"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_newrelic_base_uri is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainNewrelicBaseUriVal, ok := logdrainNewrelicBaseUriAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_newrelic_base_uri expected to be basetypes.StringValue, was: %T`, logdrainNewrelicBaseUriAttribute))
	}

	logdrainNewrelicLicenseKeyAttribute, ok := attributes["logdrain_newrelic_license_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logdrain_newrelic_license_key is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	logdrainNewrelicLicenseKeyVal, ok := logdrainNewrelicLicenseKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logdrain_newrelic_license_key expected to be basetypes.StringValue, was: %T`, logdrainNewrelicLicenseKeyAttribute))
	}

	sentinelMetricsHistoryDaysAttribute, ok := attributes["sentinel_metrics_history_days"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_metrics_history_days is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	sentinelMetricsHistoryDaysVal, ok := sentinelMetricsHistoryDaysAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_metrics_history_days expected to be basetypes.Int64Value, was: %T`, sentinelMetricsHistoryDaysAttribute))
	}

	sentinelMetricsRefreshRateSecondsAttribute, ok := attributes["sentinel_metrics_refresh_rate_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_metrics_refresh_rate_seconds is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	sentinelMetricsRefreshRateSecondsVal, ok := sentinelMetricsRefreshRateSecondsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_metrics_refresh_rate_seconds expected to be basetypes.Int64Value, was: %T`, sentinelMetricsRefreshRateSecondsAttribute))
	}

	sentinelTokenAttribute, ok := attributes["sentinel_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sentinel_token is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	sentinelTokenVal, ok := sentinelTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sentinel_token expected to be basetypes.StringValue, was: %T`, sentinelTokenAttribute))
	}

	serverIdAttribute, ok := attributes["server_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`server_id is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	serverIdVal, ok := serverIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`server_id expected to be basetypes.Int64Value, was: %T`, serverIdAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	wildcardDomainAttribute, ok := attributes["wildcard_domain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wildcard_domain is missing from object`)

		return NewSettingsValueUnknown(), diags
	}

	wildcardDomainVal, ok := wildcardDomainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wildcard_domain expected to be basetypes.StringValue, was: %T`, wildcardDomainAttribute))
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	return SettingsValue{
		ConcurrentBuilds:                  concurrentBuildsVal,
		CreatedAt:                         createdAtVal,
		DockerCleanupFrequency:            dockerCleanupFrequencyVal,
		DockerCleanupThreshold:            dockerCleanupThresholdVal,
		DynamicTimeout:                    dynamicTimeoutVal,
		ForceDisabled:                     forceDisabledVal,
		ForceServerCleanup:                forceServerCleanupVal,
		Id:                                idVal,
		IsBuildServer:                     isBuildServerVal,
		IsCloudflareTunnel:                isCloudflareTunnelVal,
		IsJumpServer:                      isJumpServerVal,
		IsLogdrainAxiomEnabled:            isLogdrainAxiomEnabledVal,
		IsLogdrainCustomEnabled:           isLogdrainCustomEnabledVal,
		IsLogdrainHighlightEnabled:        isLogdrainHighlightEnabledVal,
		IsLogdrainNewrelicEnabled:         isLogdrainNewrelicEnabledVal,
		IsMetricsEnabled:                  isMetricsEnabledVal,
		IsReachable:                       isReachableVal,
		IsSentinelEnabled:                 isSentinelEnabledVal,
		IsSwarmManager:                    isSwarmManagerVal,
		IsSwarmWorker:                     isSwarmWorkerVal,
		IsUsable:                          isUsableVal,
		LogdrainAxiomApiKey:               logdrainAxiomApiKeyVal,
		LogdrainAxiomDatasetName:          logdrainAxiomDatasetNameVal,
		LogdrainCustomConfig:              logdrainCustomConfigVal,
		LogdrainCustomConfigParser:        logdrainCustomConfigParserVal,
		LogdrainHighlightProjectId:        logdrainHighlightProjectIdVal,
		LogdrainNewrelicBaseUri:           logdrainNewrelicBaseUriVal,
		LogdrainNewrelicLicenseKey:        logdrainNewrelicLicenseKeyVal,
		SentinelMetricsHistoryDays:        sentinelMetricsHistoryDaysVal,
		SentinelMetricsRefreshRateSeconds: sentinelMetricsRefreshRateSecondsVal,
		SentinelToken:                     sentinelTokenVal,
		ServerId:                          serverIdVal,
		UpdatedAt:                         updatedAtVal,
		WildcardDomain:                    wildcardDomainVal,
		state:                             attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SettingsValue {
	object, diags := NewSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSettingsValueMust(SettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SettingsType) ValueType(ctx context.Context) attr.Value {
	return SettingsValue{}
}

var _ basetypes.ObjectValuable = SettingsValue{}

type SettingsValue struct {
	ConcurrentBuilds                  basetypes.Int64Value  `tfsdk:"concurrent_builds"`
	CreatedAt                         basetypes.StringValue `tfsdk:"created_at"`
	DockerCleanupFrequency            basetypes.StringValue `tfsdk:"docker_cleanup_frequency"`
	DockerCleanupThreshold            basetypes.Int64Value  `tfsdk:"docker_cleanup_threshold"`
	DynamicTimeout                    basetypes.Int64Value  `tfsdk:"dynamic_timeout"`
	ForceDisabled                     basetypes.BoolValue   `tfsdk:"force_disabled"`
	ForceServerCleanup                basetypes.BoolValue   `tfsdk:"force_server_cleanup"`
	Id                                basetypes.Int64Value  `tfsdk:"id"`
	IsBuildServer                     basetypes.BoolValue   `tfsdk:"is_build_server"`
	IsCloudflareTunnel                basetypes.BoolValue   `tfsdk:"is_cloudflare_tunnel"`
	IsJumpServer                      basetypes.BoolValue   `tfsdk:"is_jump_server"`
	IsLogdrainAxiomEnabled            basetypes.BoolValue   `tfsdk:"is_logdrain_axiom_enabled"`
	IsLogdrainCustomEnabled           basetypes.BoolValue   `tfsdk:"is_logdrain_custom_enabled"`
	IsLogdrainHighlightEnabled        basetypes.BoolValue   `tfsdk:"is_logdrain_highlight_enabled"`
	IsLogdrainNewrelicEnabled         basetypes.BoolValue   `tfsdk:"is_logdrain_newrelic_enabled"`
	IsMetricsEnabled                  basetypes.BoolValue   `tfsdk:"is_metrics_enabled"`
	IsReachable                       basetypes.BoolValue   `tfsdk:"is_reachable"`
	IsSentinelEnabled                 basetypes.BoolValue   `tfsdk:"is_sentinel_enabled"`
	IsSwarmManager                    basetypes.BoolValue   `tfsdk:"is_swarm_manager"`
	IsSwarmWorker                     basetypes.BoolValue   `tfsdk:"is_swarm_worker"`
	IsUsable                          basetypes.BoolValue   `tfsdk:"is_usable"`
	LogdrainAxiomApiKey               basetypes.StringValue `tfsdk:"logdrain_axiom_api_key"`
	LogdrainAxiomDatasetName          basetypes.StringValue `tfsdk:"logdrain_axiom_dataset_name"`
	LogdrainCustomConfig              basetypes.StringValue `tfsdk:"logdrain_custom_config"`
	LogdrainCustomConfigParser        basetypes.StringValue `tfsdk:"logdrain_custom_config_parser"`
	LogdrainHighlightProjectId        basetypes.StringValue `tfsdk:"logdrain_highlight_project_id"`
	LogdrainNewrelicBaseUri           basetypes.StringValue `tfsdk:"logdrain_newrelic_base_uri"`
	LogdrainNewrelicLicenseKey        basetypes.StringValue `tfsdk:"logdrain_newrelic_license_key"`
	SentinelMetricsHistoryDays        basetypes.Int64Value  `tfsdk:"sentinel_metrics_history_days"`
	SentinelMetricsRefreshRateSeconds basetypes.Int64Value  `tfsdk:"sentinel_metrics_refresh_rate_seconds"`
	SentinelToken                     basetypes.StringValue `tfsdk:"sentinel_token"`
	ServerId                          basetypes.Int64Value  `tfsdk:"server_id"`
	UpdatedAt                         basetypes.StringValue `tfsdk:"updated_at"`
	WildcardDomain                    basetypes.StringValue `tfsdk:"wildcard_domain"`
	state                             attr.ValueState
}

func (v SettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 34)

	var val tftypes.Value
	var err error

	attrTypes["concurrent_builds"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["docker_cleanup_frequency"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["docker_cleanup_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["dynamic_timeout"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["force_disabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["force_server_cleanup"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["is_build_server"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_cloudflare_tunnel"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_jump_server"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_logdrain_axiom_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_logdrain_custom_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_logdrain_highlight_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_logdrain_newrelic_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_metrics_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_reachable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_sentinel_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_swarm_manager"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_swarm_worker"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_usable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["logdrain_axiom_api_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_axiom_dataset_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_custom_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_custom_config_parser"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_highlight_project_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_newrelic_base_uri"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logdrain_newrelic_license_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sentinel_metrics_history_days"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["sentinel_metrics_refresh_rate_seconds"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["sentinel_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["server_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wildcard_domain"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 34)

		val, err = v.ConcurrentBuilds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["concurrent_builds"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.DockerCleanupFrequency.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["docker_cleanup_frequency"] = val

		val, err = v.DockerCleanupThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["docker_cleanup_threshold"] = val

		val, err = v.DynamicTimeout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dynamic_timeout"] = val

		val, err = v.ForceDisabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["force_disabled"] = val

		val, err = v.ForceServerCleanup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["force_server_cleanup"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IsBuildServer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_build_server"] = val

		val, err = v.IsCloudflareTunnel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_cloudflare_tunnel"] = val

		val, err = v.IsJumpServer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_jump_server"] = val

		val, err = v.IsLogdrainAxiomEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_logdrain_axiom_enabled"] = val

		val, err = v.IsLogdrainCustomEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_logdrain_custom_enabled"] = val

		val, err = v.IsLogdrainHighlightEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_logdrain_highlight_enabled"] = val

		val, err = v.IsLogdrainNewrelicEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_logdrain_newrelic_enabled"] = val

		val, err = v.IsMetricsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_metrics_enabled"] = val

		val, err = v.IsReachable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_reachable"] = val

		val, err = v.IsSentinelEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_sentinel_enabled"] = val

		val, err = v.IsSwarmManager.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_swarm_manager"] = val

		val, err = v.IsSwarmWorker.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_swarm_worker"] = val

		val, err = v.IsUsable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_usable"] = val

		val, err = v.LogdrainAxiomApiKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_axiom_api_key"] = val

		val, err = v.LogdrainAxiomDatasetName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_axiom_dataset_name"] = val

		val, err = v.LogdrainCustomConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_custom_config"] = val

		val, err = v.LogdrainCustomConfigParser.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_custom_config_parser"] = val

		val, err = v.LogdrainHighlightProjectId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_highlight_project_id"] = val

		val, err = v.LogdrainNewrelicBaseUri.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_newrelic_base_uri"] = val

		val, err = v.LogdrainNewrelicLicenseKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logdrain_newrelic_license_key"] = val

		val, err = v.SentinelMetricsHistoryDays.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sentinel_metrics_history_days"] = val

		val, err = v.SentinelMetricsRefreshRateSeconds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sentinel_metrics_refresh_rate_seconds"] = val

		val, err = v.SentinelToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sentinel_token"] = val

		val, err = v.ServerId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["server_id"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.WildcardDomain.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wildcard_domain"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SettingsValue) String() string {
	return "SettingsValue"
}

func (v SettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"concurrent_builds":                     basetypes.Int64Type{},
		"created_at":                            basetypes.StringType{},
		"docker_cleanup_frequency":              basetypes.StringType{},
		"docker_cleanup_threshold":              basetypes.Int64Type{},
		"dynamic_timeout":                       basetypes.Int64Type{},
		"force_disabled":                        basetypes.BoolType{},
		"force_server_cleanup":                  basetypes.BoolType{},
		"id":                                    basetypes.Int64Type{},
		"is_build_server":                       basetypes.BoolType{},
		"is_cloudflare_tunnel":                  basetypes.BoolType{},
		"is_jump_server":                        basetypes.BoolType{},
		"is_logdrain_axiom_enabled":             basetypes.BoolType{},
		"is_logdrain_custom_enabled":            basetypes.BoolType{},
		"is_logdrain_highlight_enabled":         basetypes.BoolType{},
		"is_logdrain_newrelic_enabled":          basetypes.BoolType{},
		"is_metrics_enabled":                    basetypes.BoolType{},
		"is_reachable":                          basetypes.BoolType{},
		"is_sentinel_enabled":                   basetypes.BoolType{},
		"is_swarm_manager":                      basetypes.BoolType{},
		"is_swarm_worker":                       basetypes.BoolType{},
		"is_usable":                             basetypes.BoolType{},
		"logdrain_axiom_api_key":                basetypes.StringType{},
		"logdrain_axiom_dataset_name":           basetypes.StringType{},
		"logdrain_custom_config":                basetypes.StringType{},
		"logdrain_custom_config_parser":         basetypes.StringType{},
		"logdrain_highlight_project_id":         basetypes.StringType{},
		"logdrain_newrelic_base_uri":            basetypes.StringType{},
		"logdrain_newrelic_license_key":         basetypes.StringType{},
		"sentinel_metrics_history_days":         basetypes.Int64Type{},
		"sentinel_metrics_refresh_rate_seconds": basetypes.Int64Type{},
		"sentinel_token":                        basetypes.StringType{},
		"server_id":                             basetypes.Int64Type{},
		"updated_at":                            basetypes.StringType{},
		"wildcard_domain":                       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"concurrent_builds":                     v.ConcurrentBuilds,
			"created_at":                            v.CreatedAt,
			"docker_cleanup_frequency":              v.DockerCleanupFrequency,
			"docker_cleanup_threshold":              v.DockerCleanupThreshold,
			"dynamic_timeout":                       v.DynamicTimeout,
			"force_disabled":                        v.ForceDisabled,
			"force_server_cleanup":                  v.ForceServerCleanup,
			"id":                                    v.Id,
			"is_build_server":                       v.IsBuildServer,
			"is_cloudflare_tunnel":                  v.IsCloudflareTunnel,
			"is_jump_server":                        v.IsJumpServer,
			"is_logdrain_axiom_enabled":             v.IsLogdrainAxiomEnabled,
			"is_logdrain_custom_enabled":            v.IsLogdrainCustomEnabled,
			"is_logdrain_highlight_enabled":         v.IsLogdrainHighlightEnabled,
			"is_logdrain_newrelic_enabled":          v.IsLogdrainNewrelicEnabled,
			"is_metrics_enabled":                    v.IsMetricsEnabled,
			"is_reachable":                          v.IsReachable,
			"is_sentinel_enabled":                   v.IsSentinelEnabled,
			"is_swarm_manager":                      v.IsSwarmManager,
			"is_swarm_worker":                       v.IsSwarmWorker,
			"is_usable":                             v.IsUsable,
			"logdrain_axiom_api_key":                v.LogdrainAxiomApiKey,
			"logdrain_axiom_dataset_name":           v.LogdrainAxiomDatasetName,
			"logdrain_custom_config":                v.LogdrainCustomConfig,
			"logdrain_custom_config_parser":         v.LogdrainCustomConfigParser,
			"logdrain_highlight_project_id":         v.LogdrainHighlightProjectId,
			"logdrain_newrelic_base_uri":            v.LogdrainNewrelicBaseUri,
			"logdrain_newrelic_license_key":         v.LogdrainNewrelicLicenseKey,
			"sentinel_metrics_history_days":         v.SentinelMetricsHistoryDays,
			"sentinel_metrics_refresh_rate_seconds": v.SentinelMetricsRefreshRateSeconds,
			"sentinel_token":                        v.SentinelToken,
			"server_id":                             v.ServerId,
			"updated_at":                            v.UpdatedAt,
			"wildcard_domain":                       v.WildcardDomain,
		})

	return objVal, diags
}

func (v SettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(SettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ConcurrentBuilds.Equal(other.ConcurrentBuilds) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.DockerCleanupFrequency.Equal(other.DockerCleanupFrequency) {
		return false
	}

	if !v.DockerCleanupThreshold.Equal(other.DockerCleanupThreshold) {
		return false
	}

	if !v.DynamicTimeout.Equal(other.DynamicTimeout) {
		return false
	}

	if !v.ForceDisabled.Equal(other.ForceDisabled) {
		return false
	}

	if !v.ForceServerCleanup.Equal(other.ForceServerCleanup) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IsBuildServer.Equal(other.IsBuildServer) {
		return false
	}

	if !v.IsCloudflareTunnel.Equal(other.IsCloudflareTunnel) {
		return false
	}

	if !v.IsJumpServer.Equal(other.IsJumpServer) {
		return false
	}

	if !v.IsLogdrainAxiomEnabled.Equal(other.IsLogdrainAxiomEnabled) {
		return false
	}

	if !v.IsLogdrainCustomEnabled.Equal(other.IsLogdrainCustomEnabled) {
		return false
	}

	if !v.IsLogdrainHighlightEnabled.Equal(other.IsLogdrainHighlightEnabled) {
		return false
	}

	if !v.IsLogdrainNewrelicEnabled.Equal(other.IsLogdrainNewrelicEnabled) {
		return false
	}

	if !v.IsMetricsEnabled.Equal(other.IsMetricsEnabled) {
		return false
	}

	if !v.IsReachable.Equal(other.IsReachable) {
		return false
	}

	if !v.IsSentinelEnabled.Equal(other.IsSentinelEnabled) {
		return false
	}

	if !v.IsSwarmManager.Equal(other.IsSwarmManager) {
		return false
	}

	if !v.IsSwarmWorker.Equal(other.IsSwarmWorker) {
		return false
	}

	if !v.IsUsable.Equal(other.IsUsable) {
		return false
	}

	if !v.LogdrainAxiomApiKey.Equal(other.LogdrainAxiomApiKey) {
		return false
	}

	if !v.LogdrainAxiomDatasetName.Equal(other.LogdrainAxiomDatasetName) {
		return false
	}

	if !v.LogdrainCustomConfig.Equal(other.LogdrainCustomConfig) {
		return false
	}

	if !v.LogdrainCustomConfigParser.Equal(other.LogdrainCustomConfigParser) {
		return false
	}

	if !v.LogdrainHighlightProjectId.Equal(other.LogdrainHighlightProjectId) {
		return false
	}

	if !v.LogdrainNewrelicBaseUri.Equal(other.LogdrainNewrelicBaseUri) {
		return false
	}

	if !v.LogdrainNewrelicLicenseKey.Equal(other.LogdrainNewrelicLicenseKey) {
		return false
	}

	if !v.SentinelMetricsHistoryDays.Equal(other.SentinelMetricsHistoryDays) {
		return false
	}

	if !v.SentinelMetricsRefreshRateSeconds.Equal(other.SentinelMetricsRefreshRateSeconds) {
		return false
	}

	if !v.SentinelToken.Equal(other.SentinelToken) {
		return false
	}

	if !v.ServerId.Equal(other.ServerId) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.WildcardDomain.Equal(other.WildcardDomain) {
		return false
	}

	return true
}

func (v SettingsValue) Type(ctx context.Context) attr.Type {
	return SettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"concurrent_builds":                     basetypes.Int64Type{},
		"created_at":                            basetypes.StringType{},
		"docker_cleanup_frequency":              basetypes.StringType{},
		"docker_cleanup_threshold":              basetypes.Int64Type{},
		"dynamic_timeout":                       basetypes.Int64Type{},
		"force_disabled":                        basetypes.BoolType{},
		"force_server_cleanup":                  basetypes.BoolType{},
		"id":                                    basetypes.Int64Type{},
		"is_build_server":                       basetypes.BoolType{},
		"is_cloudflare_tunnel":                  basetypes.BoolType{},
		"is_jump_server":                        basetypes.BoolType{},
		"is_logdrain_axiom_enabled":             basetypes.BoolType{},
		"is_logdrain_custom_enabled":            basetypes.BoolType{},
		"is_logdrain_highlight_enabled":         basetypes.BoolType{},
		"is_logdrain_newrelic_enabled":          basetypes.BoolType{},
		"is_metrics_enabled":                    basetypes.BoolType{},
		"is_reachable":                          basetypes.BoolType{},
		"is_sentinel_enabled":                   basetypes.BoolType{},
		"is_swarm_manager":                      basetypes.BoolType{},
		"is_swarm_worker":                       basetypes.BoolType{},
		"is_usable":                             basetypes.BoolType{},
		"logdrain_axiom_api_key":                basetypes.StringType{},
		"logdrain_axiom_dataset_name":           basetypes.StringType{},
		"logdrain_custom_config":                basetypes.StringType{},
		"logdrain_custom_config_parser":         basetypes.StringType{},
		"logdrain_highlight_project_id":         basetypes.StringType{},
		"logdrain_newrelic_base_uri":            basetypes.StringType{},
		"logdrain_newrelic_license_key":         basetypes.StringType{},
		"sentinel_metrics_history_days":         basetypes.Int64Type{},
		"sentinel_metrics_refresh_rate_seconds": basetypes.Int64Type{},
		"sentinel_token":                        basetypes.StringType{},
		"server_id":                             basetypes.Int64Type{},
		"updated_at":                            basetypes.StringType{},
		"wildcard_domain":                       basetypes.StringType{},
	}
}
