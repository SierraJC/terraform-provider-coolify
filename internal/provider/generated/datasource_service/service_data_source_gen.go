// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_service

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ServiceDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"config_hash": schema.StringAttribute{
				Computed:            true,
				Description:         "The hash of the service configuration.",
				MarkdownDescription: "The hash of the service configuration.",
			},
			"connect_to_docker_network": schema.BoolAttribute{
				Computed:            true,
				Description:         "The flag to connect the service to the predefined Docker network.",
				MarkdownDescription: "The flag to connect the service to the predefined Docker network.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time when the service was created.",
				MarkdownDescription: "The date and time when the service was created.",
			},
			"deleted_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time when the service was deleted.",
				MarkdownDescription: "The date and time when the service was deleted.",
			},
			"description": schema.StringAttribute{
				Computed:            true,
				Description:         "The description of the service.",
				MarkdownDescription: "The description of the service.",
			},
			"destination_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The unique identifier of the destination where the service is running.",
				MarkdownDescription: "The unique identifier of the destination where the service is running.",
			},
			"destination_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Destination type.",
				MarkdownDescription: "Destination type.",
			},
			"docker_compose": schema.StringAttribute{
				Computed:            true,
				Description:         "The docker-compose.yml file that is parsed and modified by Coolify.",
				MarkdownDescription: "The docker-compose.yml file that is parsed and modified by Coolify.",
			},
			"docker_compose_raw": schema.StringAttribute{
				Computed:            true,
				Description:         "The raw docker-compose.yml file of the service.",
				MarkdownDescription: "The raw docker-compose.yml file of the service.",
			},
			"environment_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The unique identifier of the environment where the service is attached to.",
				MarkdownDescription: "The unique identifier of the environment where the service is attached to.",
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The unique identifier of the service. Only used for database identification.",
				MarkdownDescription: "The unique identifier of the service. Only used for database identification.",
			},
			"is_container_label_escape_enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "The flag to enable the container label escape.",
				MarkdownDescription: "The flag to enable the container label escape.",
			},
			"is_container_label_readonly_enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "The flag to enable the container label readonly.",
				MarkdownDescription: "The flag to enable the container label readonly.",
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the service.",
				MarkdownDescription: "The name of the service.",
			},
			"server_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "The unique identifier of the server where the service is running.",
				MarkdownDescription: "The unique identifier of the server where the service is running.",
			},
			"service_type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of the service.",
				MarkdownDescription: "The type of the service.",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time when the service was last updated.",
				MarkdownDescription: "The date and time when the service was last updated.",
			},
			"uuid": schema.StringAttribute{
				Required:            true,
				Description:         "Service UUID",
				MarkdownDescription: "Service UUID",
			},
		},
	}
}

type ServiceModel struct {
	ConfigHash                      types.String `tfsdk:"config_hash"`
	ConnectToDockerNetwork          types.Bool   `tfsdk:"connect_to_docker_network"`
	CreatedAt                       types.String `tfsdk:"created_at"`
	DeletedAt                       types.String `tfsdk:"deleted_at"`
	Description                     types.String `tfsdk:"description"`
	DestinationId                   types.Int64  `tfsdk:"destination_id"`
	DestinationType                 types.String `tfsdk:"destination_type"`
	DockerCompose                   types.String `tfsdk:"docker_compose"`
	DockerComposeRaw                types.String `tfsdk:"docker_compose_raw"`
	EnvironmentId                   types.Int64  `tfsdk:"environment_id"`
	Id                              types.Int64  `tfsdk:"id"`
	IsContainerLabelEscapeEnabled   types.Bool   `tfsdk:"is_container_label_escape_enabled"`
	IsContainerLabelReadonlyEnabled types.Bool   `tfsdk:"is_container_label_readonly_enabled"`
	Name                            types.String `tfsdk:"name"`
	ServerId                        types.Int64  `tfsdk:"server_id"`
	ServiceType                     types.String `tfsdk:"service_type"`
	UpdatedAt                       types.String `tfsdk:"updated_at"`
	Uuid                            types.String `tfsdk:"uuid"`
}
