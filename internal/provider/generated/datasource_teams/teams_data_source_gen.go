// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_teams

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func TeamsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"teams": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time the team was created.",
							MarkdownDescription: "The date and time the team was created.",
						},
						"custom_server_limit": schema.StringAttribute{
							Computed:            true,
							Description:         "The custom server limit.",
							MarkdownDescription: "The custom server limit.",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the team.",
							MarkdownDescription: "The description of the team.",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "The unique identifier of the team.",
							MarkdownDescription: "The unique identifier of the team.",
						},
						"members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"created_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user was created.",
										MarkdownDescription: "The date when the user was created.",
									},
									"email": schema.StringAttribute{
										Computed:            true,
										Description:         "The user email.",
										MarkdownDescription: "The user email.",
									},
									"email_verified_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user email was verified.",
										MarkdownDescription: "The date when the user email was verified.",
									},
									"force_password_reset": schema.BoolAttribute{
										Computed:            true,
										Description:         "The flag to force the user to reset the password.",
										MarkdownDescription: "The flag to force the user to reset the password.",
									},
									"id": schema.Int64Attribute{
										Computed:            true,
										Description:         "The user identifier in the database.",
										MarkdownDescription: "The user identifier in the database.",
									},
									"marketing_emails": schema.BoolAttribute{
										Computed:            true,
										Description:         "The flag to receive marketing emails.",
										MarkdownDescription: "The flag to receive marketing emails.",
									},
									"name": schema.StringAttribute{
										Computed:            true,
										Description:         "The user name.",
										MarkdownDescription: "The user name.",
									},
									"two_factor_confirmed_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user two factor was confirmed.",
										MarkdownDescription: "The date when the user two factor was confirmed.",
									},
									"updated_at": schema.StringAttribute{
										Computed:            true,
										Description:         "The date when the user was updated.",
										MarkdownDescription: "The date when the user was updated.",
									},
								},
								CustomType: MembersType{
									ObjectType: types.ObjectType{
										AttrTypes: MembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "The members of the team.",
							MarkdownDescription: "The members of the team.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the team.",
							MarkdownDescription: "The name of the team.",
						},
						"personal_team": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether the team is personal or not.",
							MarkdownDescription: "Whether the team is personal or not.",
						},
						"show_boarding": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to show the boarding screen or not.",
							MarkdownDescription: "Whether to show the boarding screen or not.",
						},
						"updated_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time the team was last updated.",
							MarkdownDescription: "The date and time the team was last updated.",
						},
					},
					CustomType: TeamsType{
						ObjectType: types.ObjectType{
							AttrTypes: TeamsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type TeamsModel struct {
	Teams types.Set `tfsdk:"teams"`
}

var _ basetypes.ObjectTypable = TeamsType{}

type TeamsType struct {
	basetypes.ObjectType
}

func (t TeamsType) Equal(o attr.Type) bool {
	other, ok := o.(TeamsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TeamsType) String() string {
	return "TeamsType"
}

func (t TeamsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	customServerLimitAttribute, ok := attributes["custom_server_limit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_server_limit is missing from object`)

		return nil, diags
	}

	customServerLimitVal, ok := customServerLimitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_server_limit expected to be basetypes.StringValue, was: %T`, customServerLimitAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return nil, diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	personalTeamAttribute, ok := attributes["personal_team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`personal_team is missing from object`)

		return nil, diags
	}

	personalTeamVal, ok := personalTeamAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`personal_team expected to be basetypes.BoolValue, was: %T`, personalTeamAttribute))
	}

	showBoardingAttribute, ok := attributes["show_boarding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`show_boarding is missing from object`)

		return nil, diags
	}

	showBoardingVal, ok := showBoardingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`show_boarding expected to be basetypes.BoolValue, was: %T`, showBoardingAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TeamsValue{
		CreatedAt:         createdAtVal,
		CustomServerLimit: customServerLimitVal,
		Description:       descriptionVal,
		Id:                idVal,
		Members:           membersVal,
		Name:              nameVal,
		PersonalTeam:      personalTeamVal,
		ShowBoarding:      showBoardingVal,
		UpdatedAt:         updatedAtVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewTeamsValueNull() TeamsValue {
	return TeamsValue{
		state: attr.ValueStateNull,
	}
}

func NewTeamsValueUnknown() TeamsValue {
	return TeamsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTeamsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TeamsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TeamsValue Attribute Value",
				"While creating a TeamsValue value, a missing attribute value was detected. "+
					"A TeamsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TeamsValue Attribute Type",
				"While creating a TeamsValue value, an invalid attribute value was detected. "+
					"A TeamsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TeamsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TeamsValue Attribute Value",
				"While creating a TeamsValue value, an extra attribute value was detected. "+
					"A TeamsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TeamsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTeamsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	customServerLimitAttribute, ok := attributes["custom_server_limit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_server_limit is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	customServerLimitVal, ok := customServerLimitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_server_limit expected to be basetypes.StringValue, was: %T`, customServerLimitAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	personalTeamAttribute, ok := attributes["personal_team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`personal_team is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	personalTeamVal, ok := personalTeamAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`personal_team expected to be basetypes.BoolValue, was: %T`, personalTeamAttribute))
	}

	showBoardingAttribute, ok := attributes["show_boarding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`show_boarding is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	showBoardingVal, ok := showBoardingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`show_boarding expected to be basetypes.BoolValue, was: %T`, showBoardingAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewTeamsValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewTeamsValueUnknown(), diags
	}

	return TeamsValue{
		CreatedAt:         createdAtVal,
		CustomServerLimit: customServerLimitVal,
		Description:       descriptionVal,
		Id:                idVal,
		Members:           membersVal,
		Name:              nameVal,
		PersonalTeam:      personalTeamVal,
		ShowBoarding:      showBoardingVal,
		UpdatedAt:         updatedAtVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewTeamsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TeamsValue {
	object, diags := NewTeamsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTeamsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TeamsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTeamsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTeamsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTeamsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTeamsValueMust(TeamsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TeamsType) ValueType(ctx context.Context) attr.Value {
	return TeamsValue{}
}

var _ basetypes.ObjectValuable = TeamsValue{}

type TeamsValue struct {
	CreatedAt         basetypes.StringValue `tfsdk:"created_at"`
	CustomServerLimit basetypes.StringValue `tfsdk:"custom_server_limit"`
	Description       basetypes.StringValue `tfsdk:"description"`
	Id                basetypes.Int64Value  `tfsdk:"id"`
	Members           basetypes.ListValue   `tfsdk:"members"`
	Name              basetypes.StringValue `tfsdk:"name"`
	PersonalTeam      basetypes.BoolValue   `tfsdk:"personal_team"`
	ShowBoarding      basetypes.BoolValue   `tfsdk:"show_boarding"`
	UpdatedAt         basetypes.StringValue `tfsdk:"updated_at"`
	state             attr.ValueState
}

func (v TeamsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["custom_server_limit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["members"] = basetypes.ListType{
		ElemType: MembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["personal_team"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["show_boarding"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CustomServerLimit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_server_limit"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Members.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["members"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PersonalTeam.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["personal_team"] = val

		val, err = v.ShowBoarding.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["show_boarding"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TeamsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TeamsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TeamsValue) String() string {
	return "TeamsValue"
}

func (v TeamsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	members := types.ListValueMust(
		MembersType{
			basetypes.ObjectType{
				AttrTypes: MembersValue{}.AttributeTypes(ctx),
			},
		},
		v.Members.Elements(),
	)

	if v.Members.IsNull() {
		members = types.ListNull(
			MembersType{
				basetypes.ObjectType{
					AttrTypes: MembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Members.IsUnknown() {
		members = types.ListUnknown(
			MembersType{
				basetypes.ObjectType{
					AttrTypes: MembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"created_at":          basetypes.StringType{},
		"custom_server_limit": basetypes.StringType{},
		"description":         basetypes.StringType{},
		"id":                  basetypes.Int64Type{},
		"members": basetypes.ListType{
			ElemType: MembersValue{}.Type(ctx),
		},
		"name":          basetypes.StringType{},
		"personal_team": basetypes.BoolType{},
		"show_boarding": basetypes.BoolType{},
		"updated_at":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":          v.CreatedAt,
			"custom_server_limit": v.CustomServerLimit,
			"description":         v.Description,
			"id":                  v.Id,
			"members":             members,
			"name":                v.Name,
			"personal_team":       v.PersonalTeam,
			"show_boarding":       v.ShowBoarding,
			"updated_at":          v.UpdatedAt,
		})

	return objVal, diags
}

func (v TeamsValue) Equal(o attr.Value) bool {
	other, ok := o.(TeamsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CustomServerLimit.Equal(other.CustomServerLimit) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Members.Equal(other.Members) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PersonalTeam.Equal(other.PersonalTeam) {
		return false
	}

	if !v.ShowBoarding.Equal(other.ShowBoarding) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v TeamsValue) Type(ctx context.Context) attr.Type {
	return TeamsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TeamsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":          basetypes.StringType{},
		"custom_server_limit": basetypes.StringType{},
		"description":         basetypes.StringType{},
		"id":                  basetypes.Int64Type{},
		"members": basetypes.ListType{
			ElemType: MembersValue{}.Type(ctx),
		},
		"name":          basetypes.StringType{},
		"personal_team": basetypes.BoolType{},
		"show_boarding": basetypes.BoolType{},
		"updated_at":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MembersType{}

type MembersType struct {
	basetypes.ObjectType
}

func (t MembersType) Equal(o attr.Type) bool {
	other, ok := o.(MembersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MembersType) String() string {
	return "MembersType"
}

func (t MembersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	emailVerifiedAtAttribute, ok := attributes["email_verified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_verified_at is missing from object`)

		return nil, diags
	}

	emailVerifiedAtVal, ok := emailVerifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_verified_at expected to be basetypes.StringValue, was: %T`, emailVerifiedAtAttribute))
	}

	forcePasswordResetAttribute, ok := attributes["force_password_reset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_password_reset is missing from object`)

		return nil, diags
	}

	forcePasswordResetVal, ok := forcePasswordResetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_password_reset expected to be basetypes.BoolValue, was: %T`, forcePasswordResetAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	marketingEmailsAttribute, ok := attributes["marketing_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketing_emails is missing from object`)

		return nil, diags
	}

	marketingEmailsVal, ok := marketingEmailsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketing_emails expected to be basetypes.BoolValue, was: %T`, marketingEmailsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	twoFactorConfirmedAtAttribute, ok := attributes["two_factor_confirmed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`two_factor_confirmed_at is missing from object`)

		return nil, diags
	}

	twoFactorConfirmedAtVal, ok := twoFactorConfirmedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`two_factor_confirmed_at expected to be basetypes.StringValue, was: %T`, twoFactorConfirmedAtAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MembersValue{
		CreatedAt:            createdAtVal,
		Email:                emailVal,
		EmailVerifiedAt:      emailVerifiedAtVal,
		ForcePasswordReset:   forcePasswordResetVal,
		Id:                   idVal,
		MarketingEmails:      marketingEmailsVal,
		Name:                 nameVal,
		TwoFactorConfirmedAt: twoFactorConfirmedAtVal,
		UpdatedAt:            updatedAtVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMembersValueNull() MembersValue {
	return MembersValue{
		state: attr.ValueStateNull,
	}
}

func NewMembersValueUnknown() MembersValue {
	return MembersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMembersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MembersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MembersValue Attribute Value",
				"While creating a MembersValue value, a missing attribute value was detected. "+
					"A MembersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MembersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MembersValue Attribute Type",
				"While creating a MembersValue value, an invalid attribute value was detected. "+
					"A MembersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MembersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MembersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MembersValue Attribute Value",
				"While creating a MembersValue value, an extra attribute value was detected. "+
					"A MembersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MembersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMembersValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	emailVerifiedAtAttribute, ok := attributes["email_verified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_verified_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	emailVerifiedAtVal, ok := emailVerifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_verified_at expected to be basetypes.StringValue, was: %T`, emailVerifiedAtAttribute))
	}

	forcePasswordResetAttribute, ok := attributes["force_password_reset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`force_password_reset is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	forcePasswordResetVal, ok := forcePasswordResetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`force_password_reset expected to be basetypes.BoolValue, was: %T`, forcePasswordResetAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	marketingEmailsAttribute, ok := attributes["marketing_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketing_emails is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	marketingEmailsVal, ok := marketingEmailsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketing_emails expected to be basetypes.BoolValue, was: %T`, marketingEmailsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	twoFactorConfirmedAtAttribute, ok := attributes["two_factor_confirmed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`two_factor_confirmed_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	twoFactorConfirmedAtVal, ok := twoFactorConfirmedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`two_factor_confirmed_at expected to be basetypes.StringValue, was: %T`, twoFactorConfirmedAtAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewMembersValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewMembersValueUnknown(), diags
	}

	return MembersValue{
		CreatedAt:            createdAtVal,
		Email:                emailVal,
		EmailVerifiedAt:      emailVerifiedAtVal,
		ForcePasswordReset:   forcePasswordResetVal,
		Id:                   idVal,
		MarketingEmails:      marketingEmailsVal,
		Name:                 nameVal,
		TwoFactorConfirmedAt: twoFactorConfirmedAtVal,
		UpdatedAt:            updatedAtVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMembersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MembersValue {
	object, diags := NewMembersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMembersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MembersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMembersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMembersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMembersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMembersValueMust(MembersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MembersType) ValueType(ctx context.Context) attr.Value {
	return MembersValue{}
}

var _ basetypes.ObjectValuable = MembersValue{}

type MembersValue struct {
	CreatedAt            basetypes.StringValue `tfsdk:"created_at"`
	Email                basetypes.StringValue `tfsdk:"email"`
	EmailVerifiedAt      basetypes.StringValue `tfsdk:"email_verified_at"`
	ForcePasswordReset   basetypes.BoolValue   `tfsdk:"force_password_reset"`
	Id                   basetypes.Int64Value  `tfsdk:"id"`
	MarketingEmails      basetypes.BoolValue   `tfsdk:"marketing_emails"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	TwoFactorConfirmedAt basetypes.StringValue `tfsdk:"two_factor_confirmed_at"`
	UpdatedAt            basetypes.StringValue `tfsdk:"updated_at"`
	state                attr.ValueState
}

func (v MembersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_verified_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["force_password_reset"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["marketing_emails"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["two_factor_confirmed_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.EmailVerifiedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_verified_at"] = val

		val, err = v.ForcePasswordReset.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["force_password_reset"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.MarketingEmails.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["marketing_emails"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.TwoFactorConfirmedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["two_factor_confirmed_at"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MembersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MembersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MembersValue) String() string {
	return "MembersValue"
}

func (v MembersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":              basetypes.StringType{},
		"email":                   basetypes.StringType{},
		"email_verified_at":       basetypes.StringType{},
		"force_password_reset":    basetypes.BoolType{},
		"id":                      basetypes.Int64Type{},
		"marketing_emails":        basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"two_factor_confirmed_at": basetypes.StringType{},
		"updated_at":              basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":              v.CreatedAt,
			"email":                   v.Email,
			"email_verified_at":       v.EmailVerifiedAt,
			"force_password_reset":    v.ForcePasswordReset,
			"id":                      v.Id,
			"marketing_emails":        v.MarketingEmails,
			"name":                    v.Name,
			"two_factor_confirmed_at": v.TwoFactorConfirmedAt,
			"updated_at":              v.UpdatedAt,
		})

	return objVal, diags
}

func (v MembersValue) Equal(o attr.Value) bool {
	other, ok := o.(MembersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.EmailVerifiedAt.Equal(other.EmailVerifiedAt) {
		return false
	}

	if !v.ForcePasswordReset.Equal(other.ForcePasswordReset) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.MarketingEmails.Equal(other.MarketingEmails) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.TwoFactorConfirmedAt.Equal(other.TwoFactorConfirmedAt) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v MembersValue) Type(ctx context.Context) attr.Type {
	return MembersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MembersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":              basetypes.StringType{},
		"email":                   basetypes.StringType{},
		"email_verified_at":       basetypes.StringType{},
		"force_password_reset":    basetypes.BoolType{},
		"id":                      basetypes.Int64Type{},
		"marketing_emails":        basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"two_factor_confirmed_at": basetypes.StringType{},
		"updated_at":              basetypes.StringType{},
	}
}
